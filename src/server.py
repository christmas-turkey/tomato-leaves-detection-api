import uvicorn
from fastapi import FastAPI, UploadFile, HTTPException, status
from src.config import API_HOST, API_PORT, API_DEBUG
from src.yolo_model import TomatoLeavesDetectionModel
from src.llm_assistant import LLMAssistant, ModelNotAvailableError


app = FastAPI()

yolo_model = TomatoLeavesDetectionModel()
llm_assistant = LLMAssistant()

@app.get("/health")
def healthcheck():
    """
    Check if the API is running.
    """

    return {"status": "API is running"}

@app.post("/api/predict")
async def predict(
    image: UploadFile,
    model_name: str="llama-v3p1-405b-instruct"
):
    """
    Predict classes, bboxes and confidence scores of the input image and return LLM response.

    Args:
        image: The input image.
        model_name: The name of the LLM.
    
    Returns:
        - classes: The classes of the detected objects.
        - boxes: The bounding boxes of the detected objects.
        - conf: The confidence scores of the detected objects.
        - labels: The labels of the detected objects.
        - llm_response: The response generated by the LLM.
    
    Raises:
        HTTPException: If the image is not provided or the image type is invalid
    """

    content_type = image.content_type
    
    if content_type == None:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST, 
            detail="Image not provided"
        )
    
    if content_type.split("/")[0] != "image":
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST, 
            detail="Invalid image type"
        )

    image_bytes = await image.read()
    yolo_predictions = yolo_model.predict(image_bytes)

    diseases_labels = list(set(yolo_predictions["labels"]))
    diseases_labels = [d for d in diseases_labels if d != "Healthy"]
    
    try:
        llm_response = llm_assistant.generate_response(
            diseases_labels=diseases_labels,
            model_name=model_name
        )
    except ModelNotAvailableError as e:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST, 
            detail=str(e)
        )
    
    return {
        "classes": yolo_predictions["classes"],
        "boxes": yolo_predictions["boxes"],
        "conf": yolo_predictions["conf"],
        "labels": yolo_predictions["labels"],
        "llm_response": llm_response
    }


if __name__ == "__main__":
    uvicorn.run("src.server:app", host=API_HOST, port=API_PORT, reload=API_DEBUG)

